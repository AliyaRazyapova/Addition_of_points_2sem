
Задание: Тестовая система для проверки семстровок студентов.

Дана следующая структура каталогов: 
	Variants
	Students
	Exercises
	Tests
	Results
Студентам раздавались задания по семестровой работе на написание программ, которые делают некоторые вычисления. Вам следует написать !многопоточную! программу, которая позволяет проверить результаты работы программ студентов согласно заранее подобранным тестовым данным. В результате выполнения програмы для каждого студента для каждого выполненного им задания должно быть выведена таблица с успешными и неуспешными тестами. В случае неуспешного выполнения теста выводить сообщение о том, что пошло не так: 
1. программа стдента вернула неверное значение
2. нет подходящего класса или метода с соответствующим названием и набором параметров (программа не знает, что запускать)
3. возникло некоторое исключение при работе программы студента
4. студент задание не выполнял (нет соответствующей сборки)
В папке Variants находятся файлы, названием которых служит фамилия студента. Внутри этого файла находится список номеров заданий, которые студент должен выполнить. Каждое название написано в новой строке, формат следующий "exercise_15".
В папке Exercises находятся файлы с названиями вида "exercise_1.txt" (здесь 1 - это номер задания) с описанием заданий согласно следующей структуре. В первой строке находится наименование задания. Во второй строке наименование класса и метода(через ".", например, "Program.Main"), который должен описать студент. Подразумевается, что при проверке работы метода потребуется создать экземпляр этого класса, а затем у этого экземпляра вызвать указанный метод. Далее на следующей строке указан тип возвращаемого значения метода.  А дальше до конца файла построчно идут параметры для указанного метода, которые при его вызове надо будет заполнить тестовыми значениями. Формат записи следующий: Наименование параметра":"тип параметра. Пример: "a:int". В качестве типов могут выступать только следующие типы: int, double, string, char, bool.
В папке Tests находятся папки, названием которой служит название задания, например, "exercise_1". Внутри каждой папки лежит несколько файлов с тестовыми данными в следующем формате: первые n строк служат для указания значений параметров, например "a:10", что означает, что параметру a будет задано значение 10, а в последней строке будет правильный результат работы программы, с которым надо сравнивать то, что выдаёт программа студента.
В папке Students лежат папки, названиями которых служат фамилии студентов. Внутри этих папок лежат сборки (.dll). Каждая сборка имеет название следующего вида: "exercise_4.dll". Подразумевается, что внутри должен быть описан соответствующий класс, с соответствующим методом, который и надо будет вызывать при тестировании.

Примеры папок и файлов можете найти в приложенном архиве.
Ваша приложение должно работать в многопоточном режиме. При этом количество потоков должно задаваться параметром вашего приложения. Студенты должны быть поделены на более-менее равные части(по размеру не отличающиеся более, чем на 1). Обработка каждой части должна осуществляться в отдельном потоке. В конце все результаты тестирования должны быть собраны в общую таблицу и выведены все вместе в консоль. В этой таблице для каждого студента и каждого задания должно быть указано, сколько было успешных прохождений тестов и сколько безуспешным. Кроме того, отдельно для каждого студента должен быть создан файл, куда для неуспешных запусков будет выведено сообщение о том, на каком тесте произошла ошибка и что это была за ошибка. Эти файлы должны помещаться в папку Results\"Фамилия студента".
Ваше приложения должно быть написано максимально аккуратно в соответствии с принципами ООП и всех стандартных требования оформления кода. Всё это будет влиять на результирующий балл. По возможности используйте всё то, что вы успели изучить в этом и прошлом семестре, к примеру, LINQ. Даже если вы не сможете полностью реализовать ваше решение, я буду смотреть на то, что и как вы успели реализовать.

В качестве примера описаны три задания и они распределены для трёх студентов. У студента Ivanov всё должно отработать корректно, у студента Petrov 1 задание должно возвращать правильный результат, второе неверный, у студента Sidorov одной домашки нет вообще, а в другой домашке он напутал с именованиеями классов и методов.
 